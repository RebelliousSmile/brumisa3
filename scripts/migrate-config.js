/**
 * Script de migration de la configuration
 * D√©place config.js vers config/ et met √† jour les imports
 */

const fs = require('fs');
const path = require('path');

const ANCIEN_CONFIG = path.join(__dirname, '..', 'src', 'config.js');
const NOUVEAU_CONFIG_DIR = path.join(__dirname, '..', 'src', 'config');

console.log('üöÄ Migration de la configuration - Structure MVC-CS');
console.log('');

// 1. V√©rifier que les nouveaux fichiers existent
const nouveauxFichiers = [
    path.join(NOUVEAU_CONFIG_DIR, 'index.js'),
    path.join(NOUVEAU_CONFIG_DIR, 'database.js')
];

console.log('üìã V√©rification des nouveaux fichiers...');
for (const fichier of nouveauxFichiers) {
    if (fs.existsSync(fichier)) {
        console.log(`‚úÖ ${path.relative(process.cwd(), fichier)} - OK`);
    } else {
        console.log(`‚ùå ${path.relative(process.cwd(), fichier)} - MANQUANT`);
        process.exit(1);
    }
}

// 2. Backup de l'ancien config.js
if (fs.existsSync(ANCIEN_CONFIG)) {
    const backup = ANCIEN_CONFIG + '.backup';
    console.log('');
    console.log('üíæ Sauvegarde de l\'ancien fichier...');
    fs.copyFileSync(ANCIEN_CONFIG, backup);
    console.log(`‚úÖ Backup cr√©√©: ${path.relative(process.cwd(), backup)}`);
    
    // Supprimer l'ancien fichier
    fs.unlinkSync(ANCIEN_CONFIG);
    console.log(`‚úÖ Ancien config.js supprim√©`);
} else {
    console.log('‚ÑπÔ∏è Ancien config.js d√©j√† supprim√©');
}

// 3. V√©rification que les imports fonctionnent
console.log('');
console.log('üîç Test des nouveaux imports...');

try {
    const nouvelleConfig = require(path.join(NOUVEAU_CONFIG_DIR, 'index.js'));
    
    // V√©rifier les propri√©t√©s principales
    const propsRequises = ['server', 'database', 'session', 'auth', 'systemesJeu'];
    for (const prop of propsRequises) {
        if (nouvelleConfig[prop]) {
            console.log(`‚úÖ ${prop} - OK`);
        } else {
            console.log(`‚ùå ${prop} - MANQUANT`);
            process.exit(1);
        }
    }
    
    console.log('‚úÖ Nouveaux imports fonctionnels');
    
} catch (error) {
    console.log(`‚ùå Erreur import: ${error.message}`);
    process.exit(1);
}

// 4. Cr√©er README pour les environnements
const readmeEnvironments = `# Configurations d'environnement

Ce dossier contient les templates de configuration pour diff√©rents environnements.

## Utilisation

1. **D√©veloppement** : Copier \`development.example.env\` en \`.env.local\` √† la racine du projet
2. **Production** : Copier \`production.example.env\` et configurer les variables serveur
3. **Tests** : Copier \`test.example.env\` en \`.env.test\` √† la racine du projet

## Variables critiques en production

‚ö†Ô∏è **OBLIGATOIRE** - Ces variables DOIVENT √™tre chang√©es :
- \`SESSION_SECRET\` : Cl√© de chiffrement sessions (min 32 caract√®res)
- \`CODE_PREMIUM\` / \`CODE_ADMIN\` : Codes d'acc√®s application
- \`DATABASE_URL\` : Connexion PostgreSQL s√©curis√©e
- \`RESEND_API_KEY\` : Cl√© API Resend pour emails

## Structure des variables

- **Server** : PORT, HOST, NODE_ENV
- **Database** : POSTGRES_* ou DATABASE_URL
- **Security** : SESSION_SECRET, codes d'acc√®s, rate limiting
- **Directories** : Chemins des r√©pertoires de donn√©es
- **Logging** : Niveau et destination des logs
- **Features** : PDF, upload, API timeouts
`;

fs.writeFileSync(
    path.join(NOUVEAU_CONFIG_DIR, 'environments', 'README.md'),
    readmeEnvironments
);

console.log('üìù README environnements cr√©√©');

console.log('');
console.log('üéâ Migration termin√©e avec succ√®s !');
console.log('');
console.log('üìÅ Structure finale:');
console.log('   src/config/');
console.log('   ‚îú‚îÄ‚îÄ index.js           # Point d\'entr√©e (compatible ancien import)');
console.log('   ‚îú‚îÄ‚îÄ database.js        # Config g√©n√©rale application');
console.log('   ‚îú‚îÄ‚îÄ systemesJeu.js     # ‚úÖ D√©j√† pr√©sent');
console.log('   ‚îú‚îÄ‚îÄ systemesUtils.js   # ‚úÖ D√©j√† pr√©sent');
console.log('   ‚îú‚îÄ‚îÄ dataTypes/         # ‚úÖ D√©j√† pr√©sent (6 fichiers)');
console.log('   ‚îî‚îÄ‚îÄ environments/      # üÜï Templates par environnement');
console.log('');
console.log('‚úÖ Tous les imports existants continuent de fonctionner');
console.log('‚úÖ Structure conforme √† development-strategy.md');