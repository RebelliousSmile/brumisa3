#!/usr/bin/env node

/**
 * Script pour migrer les oracles existants avec leur syst√®me de jeu
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const db = require('../src/database/db');

async function migrerOraclesExistants() {
    console.log('üéÆ Migration des oracles existants avec syst√®me de jeu');
    console.log('====================================================\n');

    try {
        // 1. R√©cup√©rer tous les oracles existants
        const oracles = await db.all(`
            SELECT id, name 
            FROM oracles 
            WHERE game_system IS NULL
        `);

        console.log(`üìã Oracles √† migrer : ${oracles.length}\n`);

        if (oracles.length === 0) {
            console.log('‚úÖ Aucun oracle √† migrer, tous ont d√©j√† un syst√®me de jeu d√©fini');
            return true;
        }

        let migres = 0;

        // 2. Migrer chaque oracle selon son nom
        for (const oracle of oracles) {
            let gameSystem = null;
            
            console.log(`üîÑ Migration: ${oracle.name}`);
            
            // D√©tecter le syst√®me de jeu bas√© sur le nom
            if (oracle.name.toLowerCase().includes('monsterhearts')) {
                gameSystem = 'monsterhearts';
            } else if (oracle.name.toLowerCase().includes('engrenages') || 
                      oracle.name.toLowerCase().includes('roue du temps')) {
                gameSystem = 'engrenages';
            } else if (oracle.name.toLowerCase().includes('metro') || 
                      oracle.name.toLowerCase().includes('2033')) {
                gameSystem = 'metro2033';
            } else if (oracle.name.toLowerCase().includes('mist') || 
                      oracle.name.toLowerCase().includes('engine')) {
                gameSystem = 'mistengine';
            }

            if (gameSystem) {
                await db.run(`
                    UPDATE oracles 
                    SET game_system = $1, updated_at = CURRENT_TIMESTAMP 
                    WHERE id = $2
                `, [gameSystem, oracle.id]);
                
                console.log(`   ‚úÖ ${oracle.name} ‚Üí ${gameSystem}`);
                migres++;
            } else {
                console.log(`   ‚ö†Ô∏è  ${oracle.name} ‚Üí syst√®me non d√©tect√©, reste NULL`);
            }
        }

        console.log(`\nüìä R√©sultats de migration:`);
        console.log(`   ‚úÖ Migr√©s: ${migres}/${oracles.length}`);
        console.log(`   ‚ö†Ô∏è  Non d√©tect√©s: ${oracles.length - migres}/${oracles.length}`);

        // 3. Afficher un r√©sum√© par syst√®me
        console.log('\nüìà R√©sum√© par syst√®me de jeu:');
        const resume = await db.all(`
            SELECT 
                game_system,
                COUNT(*) as nombre_oracles
            FROM oracles 
            GROUP BY game_system
            ORDER BY game_system
        `);

        for (const stat of resume) {
            const systeme = stat.game_system || 'Non d√©fini';
            console.log(`   ${systeme}: ${stat.nombre_oracles} oracle(s)`);
        }

        return migres > 0;

    } catch (error) {
        console.log(`‚ùå Erreur lors de la migration: ${error.message}`);
        throw error;
    }
}

async function main() {
    try {
        const success = await migrerOraclesExistants();
        
        if (success) {
            console.log('\nüéâ Migration termin√©e avec succ√®s !');
            console.log('üí° √âtapes suivantes :');
            console.log('   1. Mettre √† jour OracleService pour filtrer par syst√®me');
            console.log('   2. Cr√©er une route /oracles/monsterhearts');
            console.log('   3. Modifier la page Monsterhearts pour afficher ses oracles');
        } else {
            console.log('\n‚úÖ Aucune migration n√©cessaire');
        }
        
    } catch (error) {
        console.log('\nüí• Erreur fatale:', error.message);
        if (process.env.NODE_ENV === 'development') {
            console.log('Stack:', error.stack);
        }
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}