/**
 * Script de test pour v√©rifier le fonctionnement du mod√®le Pdf
 * Usage: node scripts/test-pdf-model.js
 */

const Pdf = require('../src/models/Pdf');

async function testPdfModel() {
    console.log('üß™ Test du mod√®le Pdf...');
    
    try {
        const pdf = new Pdf();
        
        // Test de g√©n√©ration de chemin PDF (nouvelle m√©thode)
        console.log('\nüìÅ Test g√©n√©ration chemin PDF (nouveau format):');
        const pdfPath = pdf.systemRightsService.generatePdfPath(
            'Mon Personnage Test',
            'monsterhearts',
            123,
            'fiche-personnage',
            'private'
        );
        console.log('Nom g√©n√©r√©:', pdfPath.fileName);
        console.log('Chemin complet:', pdfPath.fullPath);
        
        // Test de la m√©thode legacy pour compatibilit√©
        console.log('\nüìÇ Test m√©thode legacy:');
        const legacyFileName = pdf.genererNomFichier(
            'Mon Personnage Test',
            'monsterhearts', 
            123,
            'fiche-personnage',
            'private'
        );
        console.log('Legacy nom:', legacyFileName);
        
        // Test des m√©tadonn√©es (nouveau format)
        console.log('\nüîç Test extraction m√©tadonn√©es (nouveau format):');
        const mockPdfNew = {
            nom_fichier: pdfPath.fileName,
            systemRightsService: pdf.systemRightsService
        };
        
        Object.setPrototypeOf(mockPdfNew, Pdf.prototype);
        const metadataNew = mockPdfNew.metadonneesFichier;
        console.log('Nouveau format - M√©tadonn√©es:', metadataNew);
        
        // Test parsing direct
        console.log('\nüîé Test parsing direct:');
        const parsed = pdf.systemRightsService.parseFilename(pdfPath.fileName);
        console.log('Parsing direct:', parsed);
        
        // Test des URLs (simulation)
        console.log('\nüîó Test g√©n√©ration URLs:');
        const mockPdfWithData = {
            id: 123,
            chemin_fichier: pdfPath.fullPath,
            statut: 'TERMINE',
            url_partage: JSON.stringify({
                token: 'abc123',
                active: true,
                expiration: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
            })
        };
        
        Object.setPrototypeOf(mockPdfWithData, Pdf.prototype);
        
        console.log('URL t√©l√©chargement:', mockPdfWithData.urlTelecharger);
        console.log('URL aper√ßu:', mockPdfWithData.urlApercu);
        console.log('URL partage:', mockPdfWithData.urlPartagePublic);
        console.log('URL API:', mockPdfWithData.urlApi);
        console.log('Est public:', mockPdfWithData.estPublic);
        console.log('URLs compl√®tes:', mockPdfWithData.urls);
        
        // Test de d√©termination des droits
        console.log('\nüîê Test d√©termination des droits:');
        console.log('Priv√©:', pdf.determinerSystemRights({}));
        console.log('Public:', pdf.determinerSystemRights({ system_rights: 'public' }));
        console.log('Communautaire:', pdf.determinerSystemRights({ system_rights: 'common' }));
        console.log('Avec user anonyme:', pdf.determinerSystemRights({ utilisateur_id: 0 }));
        console.log('Avec user connect√©:', pdf.determinerSystemRights({ utilisateur_id: 123 }));
        
        console.log('\n‚úÖ Tous les tests sont pass√©s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    testPdfModel();
}

module.exports = { testPdfModel };