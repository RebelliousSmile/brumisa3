/**
 * Script de diagnostic approfondi pour l'envoi d'emails
 * Teste chaque √©tape du processus d'envoi
 */

require('dotenv').config({ path: '.env.local' });

async function testEmailSendingSteps() {
    console.log('üîç Diagnostic approfondi de l\'envoi d\'email');
    console.log('');

    const testEmail = 'internet@fxguillois.email';
    console.log(`üìß Email de test: ${testEmail}`);
    console.log('');

    try {
        // √âtape 1: V√©rifier l'utilisateur et g√©n√©rer le token
        console.log('1Ô∏è‚É£ Test de g√©n√©ration de token...');
        const UtilisateurService = require('../src/services/UtilisateurService');
        const utilisateurService = new UtilisateurService();
        
        const tokenResult = await utilisateurService.genererTokenRecuperation(testEmail);
        
        if (!tokenResult) {
            console.log('‚ùå Utilisateur non trouv√©');
            return;
        }
        
        console.log('‚úÖ Token g√©n√©r√©:', {
            token_length: tokenResult.token.length,
            expires_in: '24h'
        });
        console.log('');

        // √âtape 2: Test du service EmailService directement
        console.log('2Ô∏è‚É£ Test du service EmailService...');
        const EmailService = require('../src/services/EmailService');
        const emailService = new EmailService();
        
        console.log('üìã Configuration EmailService:', {
            apiKey: emailService.apiKey ? `${emailService.apiKey.substring(0, 8)}...` : 'MANQUANTE',
            fromEmail: emailService.fromEmail,
            fromName: emailService.fromName,
            isDevelopment: emailService.isDevelopment,
            forceRealEmails: emailService.forceRealEmails,
            hasResendInstance: !!emailService.resend
        });
        console.log('');

        // √âtape 3: Test d'envoi direct
        console.log('3Ô∏è‚É£ Test d\'envoi direct via EmailService...');
        
        const emailResult = await emailService.envoyerMotDePasseOublie(
            testEmail,
            'Test User',
            tokenResult.token
        );
        
        console.log('üì® R√©sultat envoi:', emailResult);
        
        if (emailResult.success) {
            console.log('‚úÖ EmailService rapporte un succ√®s');
            if (emailResult.id) {
                console.log(`üÜî ID Resend: ${emailResult.id}`);
            }
        } else {
            console.log('‚ùå EmailService rapporte un √©chec:', emailResult.error);
        }
        console.log('');

        // √âtape 4: Test du template
        console.log('4Ô∏è‚É£ Test du template email...');
        const EmailTemplate = require('../src/services/EmailTemplate');
        const emailTemplate = new EmailTemplate();
        
        const lienRecuperation = `${process.env.BASE_URL}/reinitialiser-mot-de-passe/${tokenResult.token}`;
        const variables = {
            nom: 'Test User',
            lien_recuperation: lienRecuperation,
            duree_validite: '24 heures',
            token: tokenResult.token
        };
        
        try {
            const htmlContent = await emailTemplate.render('mot-de-passe-oublie', variables);
            console.log('‚úÖ Template rendu avec succ√®s');
            console.log(`üìÑ Longueur HTML: ${htmlContent.length} caract√®res`);
            console.log(`üîó Lien dans email: ${lienRecuperation}`);
        } catch (templateError) {
            console.log('‚ùå Erreur template:', templateError.message);
        }
        console.log('');

        // √âtape 5: Test de configuration Resend
        console.log('5Ô∏è‚É£ Test de la configuration Resend...');
        
        if (!emailService.resend) {
            console.log('‚ùå Instance Resend non initialis√©e');
            console.log('üí° V√©rifiez RESEND_API_KEY dans votre environnement');
        } else {
            console.log('‚úÖ Instance Resend disponible');
            
            // Test simple avec Resend directement
            try {
                console.log('üß™ Test direct Resend...');
                const directResult = await emailService.resend.emails.send({
                    from: `${emailService.fromName} <${emailService.fromEmail}>`,
                    to: [testEmail],
                    subject: 'Test diagnostic direct',
                    html: '<h1>Test de diagnostic</h1><p>Si vous recevez cet email, Resend fonctionne correctement.</p>'
                });
                
                console.log('‚úÖ Test direct Resend r√©ussi:', {
                    id: directResult.data?.id,
                    status: 'sent'
                });
                
            } catch (resendError) {
                console.log('‚ùå Erreur Resend directe:', resendError.message);
                if (resendError.message.includes('unauthorized')) {
                    console.log('üîë Probl√®me d\'authentification API');
                }
                if (resendError.message.includes('quota')) {
                    console.log('üìä Quota Resend d√©pass√©');
                }
            }
        }
        
        console.log('');
        console.log('üìã R√©capitulatif du diagnostic:');
        console.log('   ‚úÖ Utilisateur existe et token g√©n√©r√©');
        console.log(`   ${emailResult.success ? '‚úÖ' : '‚ùå'} EmailService: ${emailResult.success ? 'succ√®s' : '√©chec'}`);
        console.log('   ‚ùì V√©rifier les logs Resend pour confirmation');

    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error.message);
        console.error(error.stack);
    }
}

// Fonction pour v√©rifier les variables d'environnement
function checkEnvironmentVariables() {
    console.log('üîß V√©rification des variables d\'environnement:');
    console.log('');
    
    const requiredVars = [
        'RESEND_API_KEY',
        'RESEND_FROM_EMAIL', 
        'RESEND_FROM_NAME',
        'BASE_URL'
    ];
    
    const optionalVars = [
        'ADMIN_EMAIL',
        'TEST_EMAIL',
        'FORCE_REAL_EMAILS',
        'NODE_ENV'
    ];
    
    console.log('üìã Variables requises:');
    requiredVars.forEach(varName => {
        const value = process.env[varName];
        const status = value ? '‚úÖ' : '‚ùå';
        const displayValue = varName === 'RESEND_API_KEY' && value ? 
            `${value.substring(0, 8)}...` : value || 'MANQUANTE';
        console.log(`   ${status} ${varName}: ${displayValue}`);
    });
    
    console.log('');
    console.log('üìã Variables optionnelles:');
    optionalVars.forEach(varName => {
        const value = process.env[varName];
        const status = value ? '‚úÖ' : '‚ö™';
        console.log(`   ${status} ${varName}: ${value || 'non d√©finie'}`);
    });
    
    console.log('');
}

// Ex√©cution
console.log('üöÄ Diagnostic complet de l\'envoi d\'email\n');

checkEnvironmentVariables();

testEmailSendingSteps()
    .then(() => {
        console.log('');
        console.log('‚ú® Diagnostic termin√© !');
        console.log('');
        console.log('üîç Actions suivantes:');
        console.log('   1. V√©rifier les logs de cette ex√©cution');
        console.log('   2. Contr√¥ler le dashboard Resend');
        console.log('   3. Tester avec l\'API Resend directement si n√©cessaire');
    })
    .catch((error) => {
        console.error('üí• Erreur fatale:', error);
        process.exit(1);
    });