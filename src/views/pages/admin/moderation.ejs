<%- include('../../layouts/principal', { body: `
<div class="min-h-screen bg-gray-900 py-8" x-data="moderationPanel()">
    <!-- Header -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="mb-8 flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-white mb-2">Modération des Documents</h1>
                <p class="text-gray-400">Validation des documents partagés par la communauté</p>
            </div>
            <div class="flex items-center space-x-4">
                <div class="bg-gray-800/50 px-4 py-2 rounded-lg">
                    <span class="text-yellow-400 font-medium" x-text="pendingCount"></span>
                    <span class="text-gray-400 ml-1">en attente</span>
                </div>
                <%- include('../../components/ui-button', {
                    text: 'Statistiques',
                    variant: 'outline',
                    size: 'sm',
                    href: '/admin/moderation/statistiques',
                    icon: 'fas fa-chart-bar'
                }) %>
            </div>
        </div>

        <!-- Filtres -->
        <div class="mb-6 flex flex-wrap gap-4">
            <select x-model="filters.systeme" @change="applyFilters()" 
                    class="bg-gray-800 border border-gray-600 text-white rounded-lg px-3 py-2">
                <option value="">Tous les systèmes</option>
                <option value="monsterhearts">Monsterhearts</option>
                <option value="engrenages">Engrenages</option>
                <option value="metro2033">Metro 2033</option>
                <option value="mistengine">Mist Engine</option>
                <option value="zombiology">Zombiology</option>
            </select>
            
            <select x-model="filters.type" @change="applyFilters()"
                    class="bg-gray-800 border border-gray-600 text-white rounded-lg px-3 py-2">
                <option value="">Tous les types</option>
                <option value="CHARACTER">Personnage</option>
                <option value="TOWN">Ville</option>
                <option value="GROUP">Groupe</option>
                <option value="ORGANIZATION">Organisation</option>
                <option value="DANGER">Danger</option>
                <option value="GENERIQUE">Générique</option>
            </select>
            
            <select x-model="filters.statut" @change="applyFilters()"
                    class="bg-gray-800 border border-gray-600 text-white rounded-lg px-3 py-2">
                <option value="EN_ATTENTE">En attente</option>
                <option value="APPROUVE">Approuvé</option>
                <option value="REJETE">Rejeté</option>
                <option value="SIGNALE">Signalé</option>
            </select>
        </div>

        <!-- Liste des documents -->
        <div class="space-y-4">
            <template x-for="document in documents" :key="document.id">
                <div class="bg-gray-800/50 border border-gray-700 rounded-xl p-6">
                    <div class="flex items-start justify-between">
                        <!-- Informations document -->
                        <div class="flex-1">
                            <div class="flex items-center space-x-4 mb-3">
                                <h3 class="text-lg font-medium text-white" x-text="document.titre"></h3>
                                <div class="flex items-center space-x-2">
                                    <span class="px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded-full"
                                          x-text="document.systeme"></span>
                                    <span class="px-2 py-1 bg-blue-500/20 text-blue-300 text-xs rounded-full"
                                          x-text="document.type"></span>
                                    <span class="px-2 py-1 text-xs rounded-full"
                                          :class="getStatusColor(document.statut_moderation)"
                                          x-text="getStatusLabel(document.statut_moderation)"></span>
                                </div>
                            </div>
                            
                            <div class="text-gray-400 text-sm space-y-1">
                                <p><span class="font-medium">Auteur:</span> <span x-text="document.auteur_nom || 'Utilisateur anonyme'"></span></p>
                                <p><span class="font-medium">Créé:</span> <span x-text="formatDate(document.created_at)"></span></p>
                                <p x-show="document.signalements > 0" class="text-red-400">
                                    <i class="fas fa-flag mr-1"></i>
                                    <span x-text="document.signalements"></span> signalement(s)
                                </p>
                            </div>
                        </div>
                        
                        <!-- Actions -->
                        <div class="flex flex-col space-y-2 ml-4">
                            <button @click="previewDocument(document.id)"
                                    class="px-3 py-1 bg-blue-500/20 text-blue-300 rounded hover:bg-blue-500/30 text-sm">
                                <i class="fas fa-eye mr-1"></i>
                                Prévisualiser
                            </button>
                            
                            <template x-if="document.statut_moderation === 'EN_ATTENTE'">
                                <div class="flex space-x-2">
                                    <button @click="approveDocument(document.id)"
                                            class="px-3 py-1 bg-green-500/20 text-green-300 rounded hover:bg-green-500/30 text-sm">
                                        <i class="fas fa-check mr-1"></i>
                                        Approuver
                                    </button>
                                    <button @click="rejectDocument(document.id)"
                                            class="px-3 py-1 bg-red-500/20 text-red-300 rounded hover:bg-red-500/30 text-sm">
                                        <i class="fas fa-times mr-1"></i>
                                        Rejeter
                                    </button>
                                </div>
                            </template>
                            
                            <template x-if="document.statut_moderation === 'APPROUVE'">
                                <button @click="highlightDocument(document.id)"
                                        :class="document.est_mis_en_avant ? 'bg-yellow-500/30 text-yellow-200' : 'bg-yellow-500/20 text-yellow-300 hover:bg-yellow-500/30'"
                                        class="px-3 py-1 rounded text-sm">
                                    <i class="fas fa-star mr-1"></i>
                                    <span x-text="document.est_mis_en_avant ? 'Retiré' : 'Mettre en avant'"></span>
                                </button>
                            </template>
                        </div>
                    </div>
                </div>
            </template>
            
            <!-- État vide -->
            <div x-show="documents.length === 0" 
                 class="text-center py-12 text-gray-400">
                <i class="fas fa-inbox text-4xl mb-4"></i>
                <p class="text-lg mb-2">Aucun document trouvé</p>
                <p class="text-sm">Modifiez les filtres pour voir plus de contenus</p>
            </div>
        </div>

        <!-- Pagination -->
        <div x-show="pagination.pages > 1" 
             class="mt-8 flex items-center justify-between">
            <div class="text-gray-400 text-sm">
                Page <span x-text="pagination.page"></span> sur <span x-text="pagination.pages"></span>
                (<span x-text="pagination.total"></span> documents au total)
            </div>
            <div class="flex space-x-2">
                <button x-show="pagination.hasPrev" @click="loadPage(pagination.page - 1)"
                        class="px-3 py-2 bg-gray-800 text-gray-300 rounded hover:bg-gray-700">
                    Précédent
                </button>
                <button x-show="pagination.hasNext" @click="loadPage(pagination.page + 1)"
                        class="px-3 py-2 bg-gray-800 text-gray-300 rounded hover:bg-gray-700">
                    Suivant
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modal de prévisualisation -->
    <div x-show="showPreview" x-transition class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-gray-800 rounded-xl p-6 max-w-4xl max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-white">Prévisualisation du document</h3>
                <button @click="showPreview = false" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="document-preview" class="bg-white p-8 rounded">
                <!-- Le contenu sera chargé dynamiquement -->
            </div>
        </div>
    </div>
</div>

<script>
function moderationPanel() {
    return {
        documents: [],
        pendingCount: 0,
        showPreview: false,
        filters: {
            systeme: '',
            type: '',
            statut: 'EN_ATTENTE'
        },
        pagination: {
            page: 1,
            pages: 1,
            total: 0,
            hasNext: false,
            hasPrev: false
        },
        
        init() {
            this.loadDocuments();
        },
        
        async loadDocuments() {
            try {
                const params = new URLSearchParams({
                    page: this.pagination.page,
                    ...this.filters
                });
                
                const response = await fetch('/api/admin/moderation/documents-en-attente?' + params, {
                    credentials: 'include'
                });
                
                const data = await response.json();
                
                if (data.succes) {
                    this.documents = data.donnees.items || [];
                    this.pagination = data.donnees.pagination || this.pagination;
                    this.pendingCount = data.donnees.total_en_attente || 0;
                }
            } catch (error) {
                console.error('Erreur chargement documents:', error);
            }
        },
        
        applyFilters() {
            this.pagination.page = 1;
            this.loadDocuments();
        },
        
        loadPage(page) {
            this.pagination.page = page;
            this.loadDocuments();
        },
        
        async previewDocument(documentId) {
            try {
                const response = await fetch('/api/pdfs/preview-html', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ document_id: documentId })
                });
                
                const data = await response.json();
                
                if (data.succes) {
                    document.getElementById('document-preview').innerHTML = data.donnees.html;
                    this.showPreview = true;
                }
            } catch (error) {
                console.error('Erreur prévisualisation:', error);
            }
        },
        
        async approveDocument(documentId) {
            if (!confirm('Approuver ce document ?')) return;
            
            try {
                const response = await fetch('/api/admin/moderation/documents/' + documentId + '/approuver', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        commentaire_admin: ''
                    })
                });
                
                const data = await response.json();
                
                if (data.succes) {
                    this.loadDocuments(); // Recharger la liste
                }
            } catch (error) {
                console.error('Erreur approbation:', error);
            }
        },
        
        async rejectDocument(documentId) {
            const motif = prompt('Motif du rejet :');
            if (!motif) return;
            
            try {
                const response = await fetch('/api/admin/moderation/documents/' + documentId + '/rejeter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        motif: motif,
                        commentaire_admin: ''
                    })
                });
                
                const data = await response.json();
                
                if (data.succes) {
                    this.loadDocuments(); // Recharger la liste
                }
            } catch (error) {
                console.error('Erreur rejet:', error);
            }
        },
        
        async highlightDocument(documentId) {
            const document = this.documents.find(d => d.id === documentId);
            const action = document.est_mis_en_avant ? 'retirer-mise-en-avant' : 'mettre-en-avant';
            
            try {
                const response = await fetch('/api/admin/moderation/documents/' + documentId + '/' + action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        commentaire_admin: action === 'mettre-en-avant' ? 'Document mis en avant pour sa qualité' : 'Mise en avant retirée'
                    })
                });
                
                const data = await response.json();
                
                if (data.succes) {
                    // Mettre à jour localement
                    document.est_mis_en_avant = !document.est_mis_en_avant;
                }
            } catch (error) {
                console.error('Erreur mise en avant:', error);
            }
        },
        
        getStatusColor(status) {
            const colors = {
                'EN_ATTENTE': 'bg-yellow-500/20 text-yellow-300',
                'APPROUVE': 'bg-green-500/20 text-green-300',
                'REJETE': 'bg-red-500/20 text-red-300',
                'SIGNALE': 'bg-orange-500/20 text-orange-300'
            };
            return colors[status] || 'bg-gray-500/20 text-gray-300';
        },
        
        getStatusLabel(status) {
            const labels = {
                'EN_ATTENTE': 'En attente',
                'APPROUVE': 'Approuvé',
                'REJETE': 'Rejeté',
                'SIGNALE': 'Signalé'
            };
            return labels[status] || status;
        },
        
        formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    }
}
</script>
` }) %>