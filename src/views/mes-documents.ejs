<%- contentFor('body') %>
<div class="min-h-screen bg-gray-50" x-data="mesDocuments()">
    <!-- En-tête de page -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Mes Documents</h1>
                    <p class="mt-1 text-sm text-gray-600">Gérez vos personnages et PDFs</p>
                </div>
                <div class="flex space-x-3">
                    <a href="/personnages/nouveau" 
                       class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                        Nouveau personnage
                    </a>
                    <a href="/pdf/generer" 
                       class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                        </svg>
                        Générer PDF
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenu principal -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Onglets -->
        <div class="border-b border-gray-200 mb-6">
            <nav class="-mb-px flex space-x-8">
                <button @click="ongletActif = 'personnages'"
                        :class="ongletActif === 'personnages' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                        class="whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm">
                    Personnages
                    <span class="ml-2 bg-gray-100 text-gray-900 hidden sm:inline-block py-0.5 px-2.5 rounded-full text-xs font-medium" x-text="personnages.length"></span>
                </button>
                <button @click="ongletActif = 'pdfs'"
                        :class="ongletActif === 'pdfs' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                        class="whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm">
                    PDFs
                    <span class="ml-2 bg-gray-100 text-gray-900 hidden sm:inline-block py-0.5 px-2.5 rounded-full text-xs font-medium" x-text="pdfs.length"></span>
                </button>
            </nav>
        </div>

        <!-- Filtres -->
        <div class="mb-6" x-show="systemesUtilises.length > 0">
            <div class="flex flex-wrap gap-2">
                <button @click="filtreSysteme = ''; appliquerFiltres()"
                        :class="filtreSysteme === '' ? 'bg-indigo-100 text-indigo-800' : 'bg-gray-100 text-gray-700'"
                        class="px-3 py-1 rounded-full text-sm font-medium hover:bg-indigo-50">
                    Tous
                </button>
                <template x-for="systeme in systemesUtilises" :key="systeme">
                    <button @click="filtreSysteme = systeme; appliquerFiltres()"
                            :class="filtreSysteme === systeme ? 'bg-indigo-100 text-indigo-800' : 'bg-gray-100 text-gray-700'"
                            class="px-3 py-1 rounded-full text-sm font-medium hover:bg-indigo-50"
                            x-text="systeme">
                    </button>
                </template>
            </div>
        </div>

        <!-- Chargement -->
        <div x-show="chargement" class="text-center py-12">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
            <p class="mt-2 text-gray-600">Chargement...</p>
        </div>

        <!-- Tab Content: Personnages -->
        <div x-show="ongletActif === 'personnages' && !chargement">
            <!-- Message si pas de personnages -->
            <div x-show="personnagesFiltres.length === 0" class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun personnage</h3>
                <p class="mt-1 text-sm text-gray-500">Commencez par créer votre premier personnage.</p>
                <div class="mt-6">
                    <a href="/personnages/nouveau" 
                       class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        Nouveau personnage
                    </a>
                </div>
            </div>

            <!-- Liste des personnages -->
            <div x-show="personnagesFiltres.length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <template x-for="personnage in personnagesFiltres" :key="personnage.id">
                    <div class="bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-200">
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex-1">
                                    <h3 class="text-lg font-medium text-gray-900" x-text="personnage.nom"></h3>
                                    <p class="text-sm text-gray-500" x-text="personnage.systeme_jeu"></p>
                                </div>
                                <div class="relative" x-data="{ ouvert: false }">
                                    <button @click="ouvert = !ouvert" 
                                            class="text-gray-400 hover:text-gray-600 focus:outline-none">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                                        </svg>
                                    </button>
                                    <div x-show="ouvert" @click.away="ouvert = false"
                                         class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
                                        <div class="py-1">
                                            <a :href="'/personnages/' + personnage.id" 
                                               class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                Voir la fiche
                                            </a>
                                            <a :href="'/personnages/' + personnage.id + '/editer'" 
                                               class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                Modifier
                                            </a>
                                            <button @click="dupliquerPersonnage(personnage.id)" 
                                                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                Dupliquer
                                            </button>
                                            <button @click="supprimerPersonnage(personnage.id)" 
                                                    class="block w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50">
                                                Supprimer
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex items-center justify-between text-sm text-gray-500">
                                <span x-text="'Créé le ' + new Date(personnage.date_creation).toLocaleDateString('fr-FR')"></span>
                                <span x-text="'Modifié le ' + new Date(personnage.date_modification).toLocaleDateString('fr-FR')"></span>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- Tab Content: PDFs -->
        <div x-show="ongletActif === 'pdfs' && !chargement">
            <!-- Message si pas de PDFs -->
            <div x-show="pdfsFiltres.length === 0" class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun PDF</h3>
                <p class="mt-1 text-sm text-gray-500">Générez votre premier PDF à partir d'un personnage.</p>
                <div class="mt-6">
                    <a href="/pdf/generer" 
                       class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        Générer PDF
                    </a>
                </div>
            </div>

            <!-- Liste des PDFs -->
            <div x-show="pdfsFiltres.length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <template x-for="pdf in pdfsFiltres" :key="pdf.id">
                    <div class="bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-200">
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex-1">
                                    <h3 class="text-lg font-medium text-gray-900" x-text="pdf.nom || pdf.personnage_nom"></h3>
                                    <p class="text-sm text-gray-500" x-text="pdf.systeme_jeu"></p>
                                    <span :class="getStatutClass(pdf.statut)" 
                                          class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium mt-1"
                                          x-text="pdf.statut">
                                    </span>
                                </div>
                                <div class="relative" x-data="{ ouvert: false }">
                                    <button @click="ouvert = !ouvert" 
                                            class="text-gray-400 hover:text-gray-600 focus:outline-none">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                                        </svg>
                                    </button>
                                    <div x-show="ouvert" @click.away="ouvert = false"
                                         class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
                                        <div class="py-1">
                                            <a :href="'/pdfs/' + pdf.id" 
                                               class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                Voir le PDF
                                            </a>
                                            <button @click="telechargerPdf(pdf.id)" 
                                                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                Télécharger
                                            </button>
                                            <button x-show="pdf.statut === 'ECHEC'" 
                                                    @click="relancerPdf(pdf.id)" 
                                                    class="block w-full text-left px-4 py-2 text-sm text-blue-700 hover:bg-blue-50">
                                                Relancer
                                            </button>
                                            <button @click="supprimerPdf(pdf.id)" 
                                                    class="block w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50">
                                                Supprimer
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex items-center justify-between text-sm text-gray-500">
                                <span x-text="'Créé le ' + new Date(pdf.date_creation).toLocaleDateString('fr-FR')"></span>
                                <span x-show="pdf.taille_fichier" x-text="formatTaille(pdf.taille_fichier)"></span>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>
</div>

<script>
function mesDocuments() {
    return {
        // État
        ongletActif: 'personnages',
        personnages: [],
        pdfs: [],
        chargement: true,
        filtreSysteme: '',
        
        // Initialisation
        async init() {
            await Promise.all([
                this.chargerPersonnages(),
                this.chargerPdfs()
            ]);
            this.chargement = false;
        },
        
        // Getters
        get personnagesFiltres() {
            if (!this.filtreSysteme) return this.personnages;
            return this.personnages.filter(p => p.systeme_jeu === this.filtreSysteme);
        },
        
        get pdfsFiltres() {
            if (!this.filtreSysteme) return this.pdfs;
            return this.pdfs.filter(p => p.systeme_jeu === this.filtreSysteme);
        },
        
        get systemesUtilises() {
            const systemesPersonnages = this.personnages.map(p => p.systeme_jeu);
            const systemesPdfs = this.pdfs.map(p => p.systeme_jeu);
            return [...new Set([...systemesPersonnages, ...systemesPdfs])].sort();
        },
        
        // Méthodes
        async chargerPersonnages() {
            try {
                const response = await fetch('/api/personnages');
                if (!response.ok) throw new Error('Erreur lors du chargement des personnages');
                const data = await response.json();
                this.personnages = data.donnees || [];
            } catch (erreur) {
                console.error('Erreur chargement personnages:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors du chargement des personnages');
                }
            }
        },
        
        async chargerPdfs() {
            try {
                const response = await fetch('/api/pdfs');
                if (!response.ok) throw new Error('Erreur lors du chargement des PDFs');
                const data = await response.json();
                this.pdfs = data.donnees || [];
            } catch (erreur) {
                console.error('Erreur chargement PDFs:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors du chargement des PDFs');
                }
            }
        },
        
        appliquerFiltres() {
            // Les getters se mettent à jour automatiquement
        },
        
        // Actions personnages
        async dupliquerPersonnage(personnageId) {
            try {
                const response = await fetch(`/api/personnages/${personnageId}/dupliquer`, {
                    method: 'POST'
                });
                if (!response.ok) throw new Error('Erreur lors de la duplication');
                
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('succes', 'Personnage dupliqué avec succès');
                }
                await this.chargerPersonnages();
            } catch (erreur) {
                console.error('Erreur duplication:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors de la duplication');
                }
            }
        },
        
        async supprimerPersonnage(personnageId) {
            const personnage = this.personnages.find(p => p.id === personnageId);
            if (!confirm(`Êtes-vous sûr de vouloir supprimer "${personnage.nom}" ?`)) return;
            
            try {
                const response = await fetch(`/api/personnages/${personnageId}`, {
                    method: 'DELETE'
                });
                if (!response.ok) throw new Error('Erreur lors de la suppression');
                
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('succes', 'Personnage supprimé avec succès');
                }
                await this.chargerPersonnages();
            } catch (erreur) {
                console.error('Erreur suppression:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors de la suppression');
                }
            }
        },
        
        // Actions PDFs
        async telechargerPdf(pdfId) {
            try {
                window.open(`/api/pdfs/${pdfId}/telecharger`, '_blank');
            } catch (erreur) {
                console.error('Erreur téléchargement:', erreur);
            }
        },
        
        async relancerPdf(pdfId) {
            try {
                const response = await fetch(`/api/pdfs/${pdfId}/relancer`, {
                    method: 'POST'
                });
                if (!response.ok) throw new Error('Erreur lors de la relance');
                
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('succes', 'Génération PDF relancée');
                }
                await this.chargerPdfs();
            } catch (erreur) {
                console.error('Erreur relance:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors de la relance');
                }
            }
        },
        
        async supprimerPdf(pdfId) {
            const pdf = this.pdfs.find(p => p.id === pdfId);
            if (!confirm(`Êtes-vous sûr de vouloir supprimer ce PDF ?`)) return;
            
            try {
                const response = await fetch(`/api/pdfs/${pdfId}`, {
                    method: 'DELETE'
                });
                if (!response.ok) throw new Error('Erreur lors de la suppression');
                
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('succes', 'PDF supprimé avec succès');
                }
                await this.chargerPdfs();
            } catch (erreur) {
                console.error('Erreur suppression:', erreur);
                if (window.Alpine && Alpine.store && Alpine.store('app')) {
                    Alpine.store('app').ajouterMessage('erreur', 'Erreur lors de la suppression');
                }
            }
        },
        
        // Utilitaires
        getStatutClass(statut) {
            const classes = {
                'EN_ATTENTE': 'bg-yellow-100 text-yellow-800',
                'EN_COURS': 'bg-blue-100 text-blue-800',
                'TERMINE': 'bg-green-100 text-green-800',
                'ECHEC': 'bg-red-100 text-red-800'
            };
            return classes[statut] || 'bg-gray-100 text-gray-800';
        },
        
        formatTaille(taille) {
            if (!taille) return '';
            const ko = taille / 1024;
            if (ko < 1024) return `${ko.toFixed(1)} Ko`;
            return `${(ko / 1024).toFixed(1)} Mo`;
        }
    };
}
</script>