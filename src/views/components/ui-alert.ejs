<%
/**
 * Composant Alert/Notification v1.0 - Avec Support Thèmes Système
 * Architecture MVC-CS - Couche View (Composants UI)
 * 
 * Usage: <%- include('components/ui-alert', {
 *   type: 'info|success|warning|error|neutral',
 *   title: 'Titre de l\'alerte',
 *   message: 'Message détaillé de l\'alerte',
 *   dismissible: true,
 *   icon: 'fa-solid fa-info-circle',
 *   gameSystem: 'monsterhearts|engrenages|metro2033|mistengine|zombiology',
 *   actions: [
 *     { text: 'Confirmer', action: 'confirmAction()', variant: 'primary' },
 *     { text: 'Annuler', action: 'dismissAlert()', variant: 'secondary' }
 *   ],
 *   alpine: {
 *     show: 'alertVisible',
 *     dismiss: 'dismissAlert'
 *   },
 *   autoClose: 5000,
 *   position: 'top|bottom|inline',
 *   additionalClasses: '',
 *   id: 'alert-notification'
 * }) %>
 */

// Paramètres avec valeurs par défaut
const {
    type = 'info',
    title = '',
    message = '',
    dismissible = false,
    icon = '',
    gameSystem = '',
    actions = [],
    alpine = {},
    autoClose = 0,
    position = 'inline',
    additionalClasses = '',
    id = ''
} = locals;

// Intégration du SystemThemeService
const SystemThemeService = require('../../services/SystemThemeService');
const systemTheme = gameSystem ? SystemThemeService.getTheme(gameSystem) : null;

// Classes de base
const baseClasses = 'relative flex p-4 rounded-lg shadow-lg';

// Configuration des types d'alerte
const alertConfigs = {
    info: {
        bgClass: 'bg-blue-900/50',
        borderClass: 'border border-blue-500/50',
        textClass: 'text-blue-100',
        iconClass: 'text-blue-400',
        defaultIcon: 'fa-solid fa-info-circle'
    },
    success: {
        bgClass: 'bg-green-900/50',
        borderClass: 'border border-green-500/50',
        textClass: 'text-green-100',
        iconClass: 'text-green-400',
        defaultIcon: 'fa-solid fa-check-circle'
    },
    warning: {
        bgClass: 'bg-yellow-900/50',
        borderClass: 'border border-yellow-500/50',
        textClass: 'text-yellow-100',
        iconClass: 'text-yellow-400',
        defaultIcon: 'fa-solid fa-exclamation-triangle'
    },
    error: {
        bgClass: 'bg-red-900/50',
        borderClass: 'border border-red-500/50',
        textClass: 'text-red-100',
        iconClass: 'text-red-400',
        defaultIcon: 'fa-solid fa-times-circle'
    },
    neutral: {
        bgClass: 'bg-gray-800/90',
        borderClass: 'border border-gray-600/50',
        textClass: 'text-gray-100',
        iconClass: 'text-gray-400',
        defaultIcon: 'fa-solid fa-bell'
    }
};

// Configuration thématique si système fourni
const getSystemAlertConfig = (type, gameSystem) => {
    if (!gameSystem || !systemTheme) return alertConfigs[type];
    
    // Override avec les couleurs du système pour certains types
    if (type === 'info' || type === 'neutral') {
        const systemColorMap = {
            monsterhearts: {
                bgClass: 'bg-purple-900/50',
                borderClass: 'border border-purple-500/50',
                textClass: 'text-purple-100',
                iconClass: 'text-purple-400'
            },
            engrenages: {
                bgClass: 'bg-emerald-900/50',
                borderClass: 'border border-emerald-500/50',
                textClass: 'text-emerald-100',
                iconClass: 'text-emerald-400'
            },
            metro2033: {
                bgClass: 'bg-red-900/50',
                borderClass: 'border border-red-500/50',
                textClass: 'text-red-100',
                iconClass: 'text-red-400'
            },
            mistengine: {
                bgClass: 'bg-pink-900/50',
                borderClass: 'border border-pink-500/50',
                textClass: 'text-pink-100',
                iconClass: 'text-pink-400'
            },
            zombiology: {
                bgClass: 'bg-yellow-900/50',
                borderClass: 'border border-yellow-500/50',
                textClass: 'text-yellow-100',
                iconClass: 'text-yellow-400'
            }
        };
        
        return {
            ...alertConfigs[type],
            ...systemColorMap[gameSystem]
        };
    }
    
    return alertConfigs[type];
};

const config = getSystemAlertConfig(type, gameSystem);
const displayIcon = icon || config.defaultIcon;

// Classes finales
const alertClasses = [
    baseClasses,
    config.bgClass,
    config.borderClass,
    config.textClass,
    position === 'top' ? 'fixed top-4 left-4 right-4 z-50 max-w-2xl mx-auto' : '',
    position === 'bottom' ? 'fixed bottom-4 left-4 right-4 z-50 max-w-2xl mx-auto' : '',
    additionalClasses
].filter(Boolean).join(' ');

// Génération des attributs Alpine.js
const getAlpineAttributes = () => {
    let attrs = [];
    
    if (alpine.show) {
        attrs.push(`x-show="${alpine.show}"`);
        attrs.push('x-transition:enter="transition ease-out duration-300"');
        attrs.push('x-transition:enter-start="opacity-0 transform scale-90"');
        attrs.push('x-transition:enter-end="opacity-100 transform scale-100"');
        attrs.push('x-transition:leave="transition ease-in duration-200"');
        attrs.push('x-transition:leave-start="opacity-100 transform scale-100"');
        attrs.push('x-transition:leave-end="opacity-0 transform scale-90"');
    }
    
    if (autoClose > 0 && alpine.dismiss) {
        attrs.push(`x-init="setTimeout(() => ${alpine.dismiss}(), ${autoClose})"`);
    }
    
    return attrs.join(' ');
};
%>

<div 
    class="<%= alertClasses %>"
    <%= id ? `id="${id}"` : '' %>
    <%= getAlpineAttributes() %>
    role="alert"
>
    <!-- Icône -->
    <% if (displayIcon) { %>
        <div class="flex-shrink-0">
            <i class="<%= displayIcon %> <%= config.iconClass %> text-xl"></i>
        </div>
    <% } %>
    
    <!-- Contenu -->
    <div class="flex-1 <%= displayIcon ? 'ml-3' : '' %>">
        <% if (title) { %>
            <h3 class="text-sm font-semibold <%= config.textClass %>">
                <%= title %>
            </h3>
        <% } %>
        
        <% if (message) { %>
            <div class="<%= title ? 'mt-1' : '' %> text-sm opacity-90">
                <%= message %>
            </div>
        <% } %>
        
        <!-- Actions -->
        <% if (actions.length > 0) { %>
            <div class="mt-3 flex space-x-2">
                <% actions.forEach(action => { %>
                    <%- include('ui-button', {
                        text: action.text,
                        variant: action.variant || 'secondary',
                        size: 'sm',
                        action: action.action,
                        href: action.href,
                        gameSystem: gameSystem,
                        additionalClasses: 'text-xs'
                    }) %>
                <% }); %>
            </div>
        <% } %>
    </div>
    
    <!-- Bouton de fermeture -->
    <% if (dismissible) { %>
        <button
            type="button"
            class="flex-shrink-0 ml-4 inline-flex text-gray-400 hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-500 rounded-md p-1"
            <%= alpine.dismiss ? `@click="${alpine.dismiss}"` : '' %>
            aria-label="Fermer"
        >
            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
        </button>
    <% } %>
</div>

<!-- Script pour auto-fermeture sans Alpine.js -->
<% if (autoClose > 0 && !alpine.show) { %>
    <script>
        (function() {
            const alert = document.getElementById('<%= id || "alert-" + Date.now() %>');
            if (alert) {
                setTimeout(() => {
                    alert.style.transition = 'opacity 0.3s ease-in-out';
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 300);
                }, <%= autoClose %>);
            }
        })();
    </script>
<% } %>