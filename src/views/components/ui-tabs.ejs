<%
/**
 * Composant Tabs/Onglets v1.0 - Avec Support Thèmes Système
 * Architecture MVC-CS - Couche View (Composants UI)
 * 
 * Usage: <%- include('components/ui-tabs', {
 *   tabs: [
 *     { id: 'infos', label: 'Informations', icon: 'fa-solid fa-info', content: '<div>Contenu infos</div>', active: true },
 *     { id: 'stats', label: 'Statistiques', icon: 'fa-solid fa-chart-bar', content: '<div>Contenu stats</div>', badge: '3' },
 *     { id: 'docs', label: 'Documents', content: '<div>Contenu docs</div>', disabled: false }
 *   ],
 *   variant: 'default|bordered|pills|underline',
 *   orientation: 'horizontal|vertical',
 *   gameSystem: 'monsterhearts|engrenages|metro2033|mistengine|zombiology',
 *   fullWidth: false,
 *   alpine: {
 *     activeTab: 'currentTab',
 *     switchTab: 'changeTab'
 *   },
 *   additionalClasses: '',
 *   id: 'tabs-main'
 * }) %>
 */

// Paramètres avec valeurs par défaut
const {
    tabs = [],
    variant = 'default',
    orientation = 'horizontal',
    gameSystem = '',
    fullWidth = false,
    alpine = {},
    additionalClasses = '',
    id = ''
} = locals;

// Intégration du SystemThemeService
const SystemThemeService = require('../../services/SystemThemeService');
const systemTheme = gameSystem ? SystemThemeService.getTheme(gameSystem) : null;

// Déterminer l'onglet actif par défaut
const activeTabIndex = tabs.findIndex(tab => tab.active) || 0;
const defaultActiveTab = tabs[activeTabIndex]?.id || (tabs[0]?.id || '');

// Classes de base pour le conteneur
const containerClasses = [
    orientation === 'vertical' ? 'flex' : '',
    additionalClasses
].filter(Boolean).join(' ');

// Classes pour la liste d'onglets
const getTabListClasses = () => {
    const baseClasses = 'flex';
    const orientationClasses = orientation === 'vertical' 
        ? 'flex-col space-y-1 w-48 mr-4' 
        : 'space-x-1 border-b border-gray-700';
    
    const variantClasses = {
        default: '',
        bordered: 'border border-gray-700 rounded-lg p-1 bg-gray-800/50',
        pills: 'bg-gray-800/50 rounded-lg p-1',
        underline: ''
    };
    
    return [
        baseClasses,
        orientationClasses,
        variantClasses[variant] || '',
        fullWidth && orientation === 'horizontal' ? 'w-full' : ''
    ].filter(Boolean).join(' ');
};

// Classes pour chaque onglet
const getTabClasses = (tab, isActive) => {
    const baseClasses = 'relative px-4 py-2 text-sm font-medium transition-all duration-200 focus:outline-none';
    
    // Classes selon le variant
    let variantClasses = '';
    switch (variant) {
        case 'bordered':
        case 'pills':
            variantClasses = isActive 
                ? 'bg-gray-700 text-white rounded-md' 
                : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/50 rounded-md';
            break;
        case 'underline':
            variantClasses = isActive
                ? 'text-white border-b-2 border-blue-500 -mb-px'
                : 'text-gray-400 hover:text-gray-200 border-b-2 border-transparent hover:border-gray-600';
            break;
        default:
            variantClasses = isActive
                ? 'bg-gray-700/50 text-white rounded-t-md'
                : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/30 rounded-t-md';
    }
    
    // Classes thématiques si système fourni
    if (gameSystem && systemTheme && isActive) {
        const systemColorMap = {
            monsterhearts: 'border-purple-500 text-purple-400',
            engrenages: 'border-emerald-500 text-emerald-400',
            metro2033: 'border-red-500 text-red-400',
            mistengine: 'border-pink-500 text-pink-400',
            zombiology: 'border-yellow-500 text-yellow-400'
        };
        
        if (variant === 'underline') {
            variantClasses = `text-white border-b-2 ${systemColorMap[gameSystem] || 'border-blue-500'} -mb-px`;
        }
    }
    
    // Classes pour onglet désactivé
    const disabledClasses = tab.disabled 
        ? 'opacity-50 cursor-not-allowed pointer-events-none' 
        : 'cursor-pointer';
    
    // Classes pour largeur complète
    const widthClasses = fullWidth && orientation === 'horizontal' ? 'flex-1 text-center' : '';
    
    return [
        baseClasses,
        variantClasses,
        disabledClasses,
        widthClasses
    ].filter(Boolean).join(' ');
};

// Classes pour le panneau de contenu
const getPanelClasses = () => {
    return [
        'tab-panel',
        orientation === 'vertical' ? 'flex-1' : 'mt-4'
    ].join(' ');
};

// Génération des attributs Alpine.js
const getAlpineDataAttribute = () => {
    if (alpine.activeTab) {
        return `x-data="{ ${alpine.activeTab}: '${defaultActiveTab}' }"`;
    }
    return '';
};

const getTabAlpineAttributes = (tab) => {
    let attrs = [];
    
    if (alpine.activeTab && alpine.switchTab) {
        attrs.push(`@click="${alpine.switchTab}('${tab.id}')"`);
    } else if (alpine.activeTab) {
        attrs.push(`@click="${alpine.activeTab} = '${tab.id}'"`);
    }
    
    if (alpine.activeTab) {
        attrs.push(`:class="{ 'active': ${alpine.activeTab} === '${tab.id}' }"`);
    }
    
    return attrs.join(' ');
};

const getPanelAlpineAttributes = (tab) => {
    if (alpine.activeTab) {
        return `x-show="${alpine.activeTab} === '${tab.id}'" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"`;
    }
    return '';
};
%>

<div 
    class="<%= containerClasses %>"
    <%= id ? `id="${id}"` : '' %>
    <%= getAlpineDataAttribute() %>
>
    <!-- Liste des onglets -->
    <div 
        class="<%= getTabListClasses() %>"
        role="tablist"
        <%= orientation === 'vertical' ? 'aria-orientation="vertical"' : 'aria-orientation="horizontal"' %>
    >
        <% tabs.forEach((tab, index) => { %>
            <button
                type="button"
                role="tab"
                id="<%= id ? `${id}-tab-${tab.id}` : `tab-${tab.id}` %>"
                aria-controls="<%= id ? `${id}-panel-${tab.id}` : `panel-${tab.id}` %>"
                aria-selected="<%= tab.active ? 'true' : 'false' %>"
                <%= tab.disabled ? 'disabled' : '' %>
                class="<%= getTabClasses(tab, tab.active) %>"
                <%= getTabAlpineAttributes(tab) %>
            >
                <span class="flex items-center space-x-2">
                    <% if (tab.icon) { %>
                        <i class="<%= tab.icon %>"></i>
                    <% } %>
                    <span><%= tab.label %></span>
                    <% if (tab.badge) { %>
                        <span class="ml-1 px-2 py-0.5 text-xs bg-gray-700 text-gray-300 rounded-full">
                            <%= tab.badge %>
                        </span>
                    <% } %>
                </span>
            </button>
        <% }); %>
    </div>
    
    <!-- Panneaux de contenu -->
    <div class="<%= getPanelClasses() %>">
        <% tabs.forEach((tab, index) => { %>
            <div
                role="tabpanel"
                id="<%= id ? `${id}-panel-${tab.id}` : `panel-${tab.id}` %>"
                aria-labelledby="<%= id ? `${id}-tab-${tab.id}` : `tab-${tab.id}` %>"
                <%= tab.active ? '' : 'hidden' %>
                <%= getPanelAlpineAttributes(tab) %>
                class="focus:outline-none"
            >
                <%- tab.content %>
            </div>
        <% }); %>
    </div>
</div>

<!-- Style pour variantes personnalisées -->
<style>
    /* Animation pour changement d'onglet */
    .tab-panel > div {
        animation: fadeIn 0.2s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    /* Styles additionnels pour les variants */
    <% if (variant === 'pills') { %>
        #<%= id || 'tabs' %> button.active {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
    <% } %>
    
    <% if (variant === 'underline' && gameSystem) { %>
        #<%= id || 'tabs' %> button.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 2px;
            background: currentColor;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from { width: 0; left: 50%; }
            to { width: 100%; left: 0; }
        }
    <% } %>
</style>

<!-- Script de fallback sans Alpine.js -->
<% if (!alpine.activeTab) { %>
    <script>
        (function() {
            const container = document.getElementById('<%= id || "tabs-" + Date.now() %>');
            if (!container) return;
            
            const buttons = container.querySelectorAll('[role="tab"]');
            const panels = container.querySelectorAll('[role="tabpanel"]');
            
            buttons.forEach((button, index) => {
                button.addEventListener('click', () => {
                    // Désactiver tous les onglets
                    buttons.forEach(btn => {
                        btn.setAttribute('aria-selected', 'false');
                        btn.classList.remove('active');
                    });
                    
                    // Cacher tous les panneaux
                    panels.forEach(panel => {
                        panel.hidden = true;
                    });
                    
                    // Activer l'onglet cliqué
                    button.setAttribute('aria-selected', 'true');
                    button.classList.add('active');
                    
                    // Afficher le panneau correspondant
                    const panelId = button.getAttribute('aria-controls');
                    const panel = document.getElementById(panelId);
                    if (panel) {
                        panel.hidden = false;
                    }
                });
            });
        })();
    </script>
<% } %>