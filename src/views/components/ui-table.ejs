<%
/**
 * Composant Table Responsive v1.0 - Avec Support Thèmes Système
 * Architecture MVC-CS - Couche View (Composants UI)
 * 
 * Usage: <%- include('components/ui-table', {
 *   headers: ['Nom', 'Type', 'Système', 'Actions'],
 *   rows: [
 *     ['Document 1', 'CHARACTER', 'monsterhearts', '<button>Voir</button>'],
 *     ['Document 2', 'TOWN', 'engrenages', '<button>Éditer</button>']
 *   ],
 *   variant: 'default|striped|bordered|hover',
 *   responsive: true,
 *   gameSystem: 'monsterhearts|engrenages|metro2033|mistengine|zombiology',
 *   caption: 'Liste des documents',
 *   sortable: false,
 *   selectable: false,
 *   emptyMessage: 'Aucune donnée disponible',
 *   additionalClasses: '',
 *   id: 'table-documents',
 *   alpine: {
 *     data: 'tableData',
 *     sortBy: 'sortColumn',
 *     selectRow: 'selectRow'
 *   }
 * }) %>
 */

// Paramètres avec valeurs par défaut
const {
    headers = [],
    rows = [],
    variant = 'default',
    responsive = true,
    gameSystem = '',
    caption = '',
    sortable = false,
    selectable = false,
    emptyMessage = 'Aucune donnée disponible',
    additionalClasses = '',
    id = '',
    alpine = {}
} = locals;

// Intégration du SystemThemeService via locals
const systemTheme = locals.systemTheme || null;

// Classes de base
const baseClasses = 'w-full text-left';

// Classes pour les variants
const variantClasses = {
    default: 'bg-gray-800',
    striped: 'bg-gray-800',
    bordered: 'bg-gray-800 border border-gray-700',
    hover: 'bg-gray-800'
};

// Classes thématiques si un système est fourni
const getSystemClasses = (gameSystem) => {
    if (!gameSystem || !systemTheme) return '';
    
    const systemColorMap = {
        monsterhearts: 'border-purple-500/30',
        engrenages: 'border-emerald-500/30',
        metro2033: 'border-red-500/30',
        mistengine: 'border-pink-500/30',
        zombiology: 'border-yellow-500/30'
    };
    
    return systemColorMap[gameSystem] || '';
};

const tableClasses = [
    baseClasses,
    variantClasses[variant] || variantClasses.default,
    getSystemClasses(gameSystem),
    additionalClasses
].filter(Boolean).join(' ');

// Wrapper responsive
const wrapperClasses = responsive ? 'overflow-x-auto -mx-4 sm:mx-0' : '';

// Classes pour les lignes selon le variant
const getRowClasses = (index) => {
    let classes = [];
    
    if (variant === 'striped' && index % 2 === 0) {
        classes.push('bg-gray-700/50');
    }
    
    if (variant === 'hover') {
        classes.push('hover:bg-gray-700/50 transition-colors duration-150');
    }
    
    if (selectable) {
        classes.push('cursor-pointer');
    }
    
    return classes.join(' ');
};

// Classes pour les en-têtes avec thème
const getHeaderClasses = () => {
    let baseHeaderClasses = 'px-4 py-3 text-xs font-medium uppercase tracking-wider';
    
    if (gameSystem && systemTheme) {
        const colorMap = {
            monsterhearts: 'text-purple-400',
            engrenages: 'text-emerald-400',
            metro2033: 'text-red-400',
            mistengine: 'text-pink-400',
            zombiology: 'text-yellow-400'
        };
        return `${baseHeaderClasses} ${colorMap[gameSystem] || 'text-gray-400'}`;
    }
    
    return `${baseHeaderClasses} text-gray-400`;
};

// Génération des attributs Alpine.js
const getAlpineAttributes = () => {
    let attrs = [];
    
    if (alpine.data) {
        attrs.push(`x-data="${alpine.data}"`);
    }
    
    return attrs.join(' ');
};

const getHeaderAlpineAttributes = (header, index) => {
    let attrs = [];
    
    if (sortable && alpine.sortBy) {
        attrs.push(`@click="${alpine.sortBy}(${index})"`);
        attrs.push('class="cursor-pointer select-none"');
    }
    
    return attrs.join(' ');
};

const getRowAlpineAttributes = (index) => {
    let attrs = [];
    
    if (selectable && alpine.selectRow) {
        attrs.push(`@click="${alpine.selectRow}(${index})"`);
    }
    
    return attrs.join(' ');
};
%>

<div class="<%= wrapperClasses %>" <%= id ? `id="${id}-wrapper"` : '' %>>
    <table 
        class="<%= tableClasses %>"
        <%= id ? `id="${id}"` : '' %>
        <%= getAlpineAttributes() %>
    >
        <% if (caption) { %>
            <caption class="sr-only"><%= caption %></caption>
        <% } %>
        
        <% if (headers.length > 0) { %>
            <thead class="bg-gray-900">
                <tr>
                    <% if (selectable) { %>
                        <th scope="col" class="w-12 px-4 py-3">
                            <input 
                                type="checkbox" 
                                class="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
                                <%= alpine.selectAll ? `@change="${alpine.selectAll}"` : '' %>
                            >
                        </th>
                    <% } %>
                    
                    <% headers.forEach((header, index) => { %>
                        <th 
                            scope="col" 
                            class="<%= getHeaderClasses() %>"
                            <%= getHeaderAlpineAttributes(header, index) %>
                        >
                            <div class="flex items-center space-x-1">
                                <span><%= header %></span>
                                <% if (sortable) { %>
                                    <svg class="w-3 h-3 opacity-50" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M5 12a1 1 0 102 0V6.414l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L5 6.414V12zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z"/>
                                    </svg>
                                <% } %>
                            </div>
                        </th>
                    <% }); %>
                </tr>
            </thead>
        <% } %>
        
        <tbody class="divide-y divide-gray-700">
            <% if (rows.length === 0) { %>
                <tr>
                    <td 
                        colspan="<%= headers.length + (selectable ? 1 : 0) %>" 
                        class="px-4 py-8 text-center text-gray-500"
                    >
                        <div class="flex flex-col items-center space-y-2">
                            <svg class="w-12 h-12 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                            </svg>
                            <span><%= emptyMessage %></span>
                        </div>
                    </td>
                </tr>
            <% } else { %>
                <% rows.forEach((row, rowIndex) => { %>
                    <tr 
                        class="<%= getRowClasses(rowIndex) %>"
                        <%= getRowAlpineAttributes(rowIndex) %>
                    >
                        <% if (selectable) { %>
                            <td class="w-12 px-4 py-3">
                                <input 
                                    type="checkbox" 
                                    class="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
                                    <%= alpine.selected ? `:checked="${alpine.selected}.includes(${rowIndex})"` : '' %>
                                >
                            </td>
                        <% } %>
                        
                        <% row.forEach((cell, cellIndex) => { %>
                            <td class="px-4 py-3 text-sm text-gray-300">
                                <%- cell %>
                            </td>
                        <% }); %>
                    </tr>
                <% }); %>
            <% } %>
        </tbody>
        
        <% if (locals.footer) { %>
            <tfoot class="bg-gray-900">
                <tr>
                    <td colspan="<%= headers.length + (selectable ? 1 : 0) %>" class="px-4 py-3">
                        <%- footer %>
                    </td>
                </tr>
            </tfoot>
        <% } %>
    </table>
</div>

<% if (responsive) { %>
    <style>
        /* Styles responsive pour mobile */
        @media (max-width: 640px) {
            #<%= id || 'table' %> thead {
                display: none;
            }
            
            #<%= id || 'table' %> tbody tr {
                display: block;
                margin-bottom: 1rem;
                border: 1px solid rgba(75, 85, 99, 0.5);
                border-radius: 0.5rem;
                padding: 0.5rem;
            }
            
            #<%= id || 'table' %> tbody td {
                display: block;
                text-align: right;
                padding: 0.5rem;
                position: relative;
                padding-left: 40%;
            }
            
            #<%= id || 'table' %> tbody td::before {
                content: attr(data-label);
                position: absolute;
                left: 0.5rem;
                text-align: left;
                font-weight: 500;
                text-transform: uppercase;
                font-size: 0.75rem;
                color: #9ca3af;
            }
        }
    </style>
<% } %>