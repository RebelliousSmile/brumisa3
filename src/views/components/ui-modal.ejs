<%
/*
 * Composant Modal Universel
 * Usage: <%- include('components/ui-modal', { 
 *   id: 'myModal',
 *   title: 'Titre de la modale',
 *   size: 'sm|md|lg|xl|full',
 *   closable: true,
 *   backdrop: true,
 *   centered: true,
 *   bodyContent: 'Contenu du corps de la modale',
 *   footerContent: 'Contenu du pied de page',
 *   customClass: '',
 *   preventClose: false
 * }) %>
 */

// Paramètres avec valeurs par défaut
const {
    id = `modal-${Math.random().toString(36).substr(2, 9)}`,
    title = '',
    size = 'md',
    closable = true,
    backdrop = true,
    centered = true,
    bodyContent = '',
    footerContent = '',
    customClass = '',
    preventClose = false
} = locals;

// Classes de tailles
const sizeClasses = {
    'sm': 'max-w-md',
    'md': 'max-w-lg',
    'lg': 'max-w-2xl',
    'xl': 'max-w-4xl',
    'full': 'max-w-7xl'
};

// Classes pour le positionnement
const positionClasses = centered ? 'items-center' : 'items-start pt-20';

// Classes finales pour le conteneur modal
const containerClasses = [
    'fixed inset-0 z-50 overflow-y-auto',
    'flex justify-center',
    positionClasses,
    'p-4 sm:p-6 md:p-8'
].join(' ');

// Classes pour le contenu modal
const contentClasses = [
    'relative w-full',
    sizeClasses[size] || sizeClasses.md,
    'bg-gray-800 rounded-lg shadow-2xl',
    'border border-gray-700',
    'transform transition-all duration-300',
    customClass
].filter(Boolean).join(' ');

// ID unique pour l'overlay
const overlayId = `${id}-overlay`;
%>

<!-- Modal Overlay -->
<div 
    id="<%= id %>" 
    class="<%= containerClasses %> hidden"
    x-data="{ 
        show: false,
        preventClose: <%= preventClose ? 'true' : 'false' %>,
        open() {
            this.show = true;
            document.body.style.overflow = 'hidden';
            this.$nextTick(() => {
                this.$refs.modal.focus();
            });
        },
        close() {
            if (this.preventClose) return;
            this.show = false;
            document.body.style.overflow = 'auto';
        },
        closeOnEscape(event) {
            if (event.key === 'Escape' && !this.preventClose) {
                this.close();
            }
        }
    }"
    x-show="show"
    x-on:keydown.window="closeOnEscape"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    style="display: none;"
>
    <!-- Backdrop -->
    <% if (backdrop) { %>
        <div 
            id="<%= overlayId %>"
            class="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm"
            <% if (closable && !preventClose) { %>
                x-on:click="close()"
            <% } %>
        ></div>
    <% } %>
    
    <!-- Modal Content -->
    <div 
        class="<%= contentClasses %>"
        x-ref="modal"
        tabindex="-1"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0 transform scale-95"
        x-transition:enter-end="opacity-100 transform scale-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100 transform scale-100"
        x-transition:leave-end="opacity-0 transform scale-95"
    >
        <!-- Header -->
        <% if (title || closable) { %>
            <div class="flex items-center justify-between p-6 border-b border-gray-700">
                <% if (title) { %>
                    <h3 class="text-xl font-semibold text-white">
                        <%= title %>
                    </h3>
                <% } %>
                
                <% if (closable && !preventClose) { %>
                    <button 
                        type="button"
                        class="text-gray-400 hover:text-white focus:outline-none focus:text-white transition-colors duration-200"
                        x-on:click="close()"
                        aria-label="Fermer la modale"
                    >
                        <i class="fa-solid fa-times text-xl"></i>
                    </button>
                <% } %>
            </div>
        <% } %>
        
        <!-- Body -->
        <div class="p-6 text-gray-300">
            <% if (bodyContent) { %>
                <%- bodyContent %>
            <% } else { %>
                <!-- Slot pour contenu personnalisé -->
                <div id="<%= id %>-body">
                    <!-- Le contenu sera injecté ici via JavaScript ou directement -->
                </div>
            <% } %>
        </div>
        
        <!-- Footer -->
        <% if (footerContent) { %>
            <div class="flex items-center justify-end px-6 py-4 bg-gray-750 border-t border-gray-700 rounded-b-lg">
                <%- footerContent %>
            </div>
        <% } %>
    </div>
</div>

<script>
// Fonctions globales pour contrôler la modale
window.openModal = function(modalId) {
    const modal = document.getElementById(modalId);
    if (modal && modal.__x) {
        modal.__x.$data.open();
    }
};

window.closeModal = function(modalId) {
    const modal = document.getElementById(modalId);
    if (modal && modal.__x) {
        modal.__x.$data.close();
    }
};

// Fonction pour définir le contenu dynamiquement
window.setModalContent = function(modalId, content, title = null) {
    const modal = document.getElementById(modalId);
    if (modal) {
        const bodyElement = modal.querySelector(`#${modalId}-body`);
        if (bodyElement) {
            bodyElement.innerHTML = content;
        }
        
        if (title) {
            const titleElement = modal.querySelector('h3');
            if (titleElement) {
                titleElement.textContent = title;
            }
        }
    }
};

// Fonction pour créer des boutons de footer
window.createModalFooter = function(buttons) {
    return buttons.map(btn => {
        const variant = btn.variant || 'secondary';
        const classes = {
            'primary': 'bg-generique hover:bg-generique-dark text-white',
            'secondary': 'bg-gray-700 hover:bg-gray-600 text-white',
            'danger': 'bg-erreur hover:bg-red-600 text-white',
            'success': 'bg-succes hover:bg-green-600 text-white'
        };
        
        return `<button 
            type="button" 
            class="inline-flex items-center px-4 py-2 ml-3 text-sm font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${classes[variant] || classes.secondary}"
            onclick="${btn.onclick || ''}"
        >
            ${btn.icon ? `<i class="${btn.icon} mr-2"></i>` : ''}
            ${btn.text}
        </button>`;
    }).join('');
};
</script>