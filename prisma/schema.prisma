generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String?     @unique
  name       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  playspaces Playspace[]

  @@index([email])
  @@map("users")
}

model Playspace {
  id          String      @id @default(cuid())
  name        String
  description String?
  userId      String

  // Architecture Hack + Univers
  // - hackId : "city-of-mist" | "litm" | "otherlands" (contient versionId en config)
  // - universeId : null (default du hack) ou custom (ex: "paris-1920", "neo-tokyo")
  // RÃ¨gles et validation via code/server/config/systems.config.ts
  hackId      String
  universeId  String? // null = utilise defaultUniverse, ou ID custom

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  characters  Character[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hackId])
  @@map("playspaces")
}

model Character {
  id          String      @id @default(cuid())
  name        String
  description String?
  playspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  playspace   Playspace   @relation(fields: [playspaceId], references: [id], onDelete: Cascade)
  heroCard    HeroCard?
  themeCards  ThemeCard[]
  trackers    Trackers?

  @@index([playspaceId])
  @@index([createdAt])
  @@map("characters")
}

model ThemeCard {
  id          String    @id @default(cuid())
  name        String
  type        ThemeType
  description String?
  attention   Int       @default(0)
  characterId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([characterId])
  @@map("theme_cards")
}

model Tag {
  id          String    @id @default(cuid())
  name        String
  type        TagType
  burned      Boolean   @default(false)
  inverted    Boolean   @default(false)
  themeCardId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  themeCard   ThemeCard @relation(fields: [themeCardId], references: [id], onDelete: Cascade)

  @@index([themeCardId])
  @@index([type])
  @@map("tags")
}

model HeroCard {
  id            String         @id @default(cuid())
  identity      String
  mystery       String
  characterId   String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  character     Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  relationships Relationship[]

  @@index([characterId])
  @@map("hero_cards")
}

model Relationship {
  id          String   @id @default(cuid())
  name        String
  description String?
  heroCardId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  heroCard    HeroCard @relation(fields: [heroCardId], references: [id], onDelete: Cascade)

  @@index([heroCardId])
  @@map("relationships")
}

model Trackers {
  id          String       @id @default(cuid())
  characterId String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  statuses    Status[]
  storyTags   StoryTag[]
  storyThemes StoryTheme[]
  character   Character    @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([characterId])
  @@map("trackers")
}

model Status {
  id         String   @id @default(cuid())
  name       String
  tier       Int      @default(1)
  positive   Boolean  @default(true)
  trackersId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  trackers   Trackers @relation(fields: [trackersId], references: [id], onDelete: Cascade)

  @@index([trackersId])
  @@map("statuses")
}

model StoryTag {
  id         String   @id @default(cuid())
  name       String
  trackersId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  trackers   Trackers @relation(fields: [trackersId], references: [id], onDelete: Cascade)

  @@index([trackersId])
  @@map("story_tags")
}

model StoryTheme {
  id         String   @id @default(cuid())
  name       String
  trackersId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  trackers   Trackers @relation(fields: [trackersId], references: [id], onDelete: Cascade)

  @@index([trackersId])
  @@map("story_themes")
}

model Danger {
  id          String   @id @default(cuid())
  name        String
  description String?
  playspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([playspaceId])
  @@map("dangers")
}

model logs_activite {
  id             Int           @id @default(autoincrement())
  utilisateur_id Int?
  action         String        @db.VarChar(100)
  ressource      String?       @db.VarChar(100)
  ressource_id   Int?
  details        Json?
  adresse_ip     String?       @db.Inet
  user_agent     String?
  date_creation  DateTime?     @default(now()) @db.Timestamp(6)
  utilisateurs   utilisateurs? @relation(fields: [utilisateur_id], references: [id], onUpdate: NoAction)

  @@index([action], map: "idx_logs_action")
  @@index([date_creation], map: "idx_logs_date")
  @@index([utilisateur_id], map: "idx_logs_utilisateur")
  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model parametres {
  cle               String    @id @db.VarChar(100)
  valeur            String
  type              String?   @default("string") @db.VarChar(20)
  description       String?
  modifiable        Boolean?  @default(true)
  date_creation     DateTime? @default(now()) @db.Timestamp(6)
  date_modification DateTime? @default(now()) @db.Timestamp(6)

  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pdfs {
  id                     Int          @id @default(autoincrement())
  personnage_id          Int
  utilisateur_id         Int
  type_pdf               String       @default("fiche_personnage") @db.VarChar(50)
  statut                 String       @default("EN_ATTENTE") @db.VarChar(50)
  progression            Int?         @default(0)
  nom_fichier            String?      @db.VarChar(255)
  chemin_fichier         String?      @db.VarChar(500)
  taille_fichier         BigInt?
  url_temporaire         String?      @db.VarChar(500)
  options_generation     Json?
  template_utilise       String?      @db.VarChar(255)
  temps_generation       Int?
  erreur_message         String?
  date_creation          DateTime?    @default(now()) @db.Timestamp(6)
  date_expiration        DateTime?    @db.Timestamp(6)
  telecharge             Boolean?     @default(false)
  nombre_telechargements Int?         @default(0)
  personnages            personnages  @relation(fields: [personnage_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  utilisateurs           utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([date_expiration], map: "idx_pdfs_expiration")
  @@index([personnage_id], map: "idx_pdfs_personnage")
  @@index([statut], map: "idx_pdfs_statut")
  @@index([utilisateur_id], map: "idx_pdfs_utilisateur")
  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model personnages {
  id                  Int          @id @default(autoincrement())
  utilisateur_id      Int
  nom                 String       @db.VarChar(255)
  systeme_jeu         String       @db.VarChar(50)
  attributs           Json
  competences         Json?
  avantages           Json?
  equipement          Json?
  historique          Json?
  notes               String?
  sante_actuelle      Int?         @default(0)
  sante_maximale      Int?         @default(0)
  experience_actuelle Int?         @default(0)
  experience_totale   Int?         @default(0)
  avatar_url          String?      @db.VarChar(500)
  couleur_theme       String?      @db.VarChar(50)
  public              Boolean?     @default(false)
  date_creation       DateTime?    @default(now()) @db.Timestamp(6)
  date_modification   DateTime?    @default(now()) @db.Timestamp(6)
  pdfs                pdfs[]
  utilisateurs        utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([public], map: "idx_personnages_public")
  @@index([systeme_jeu], map: "idx_personnages_systeme")
  @@index([utilisateur_id], map: "idx_personnages_utilisateur")
  @@ignore
}

model sessions {
  id              String        @id @db.VarChar(255)
  utilisateur_id  Int?
  donnees         Json
  adresse_ip      String?       @db.Inet
  user_agent      String?
  actif           Boolean?      @default(true)
  date_creation   DateTime?     @default(now()) @db.Timestamp(6)
  date_expiration DateTime      @db.Timestamp(6)
  utilisateurs    utilisateurs? @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([date_expiration], map: "idx_sessions_expiration")
  @@index([utilisateur_id], map: "idx_sessions_utilisateur")
  @@ignore
}

model templates_pdf {
  id                    Int           @id @default(autoincrement())
  nom                   String        @db.VarChar(255)
  systeme_jeu           String        @db.VarChar(50)
  type_template         String        @db.VarChar(50)
  contenu_html          String
  styles_css            String
  variables_disponibles Json?
  description           String?
  auteur_id             Int?
  public                Boolean?      @default(false)
  version               String?       @default("1.0.0") @db.VarChar(20)
  actif                 Boolean?      @default(true)
  date_creation         DateTime?     @default(now()) @db.Timestamp(6)
  date_modification     DateTime?     @default(now()) @db.Timestamp(6)
  utilisateurs          utilisateurs? @relation(fields: [auteur_id], references: [id], onUpdate: NoAction)

  @@index([public], map: "idx_templates_public")
  @@index([systeme_jeu], map: "idx_templates_systeme")
  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model utilisateurs {
  id                 Int             @id @default(autoincrement())
  nom                String          @db.VarChar(255)
  email              String?         @unique @db.VarChar(255)
  role               String          @default("UTILISATEUR") @db.VarChar(50)
  code_acces         String?         @db.VarChar(255)
  session_id         String?         @db.VarChar(255)
  derniere_connexion DateTime?       @db.Timestamp(6)
  date_creation      DateTime?       @default(now()) @db.Timestamp(6)
  date_modification  DateTime?       @default(now()) @db.Timestamp(6)
  actif              Boolean?        @default(true)
  logs_activite      logs_activite[]
  pdfs               pdfs[]
  personnages        personnages[]
  sessions           sessions[]
  templates_pdf      templates_pdf[]

  @@index([email], map: "idx_utilisateurs_email")
  @@index([session_id], map: "idx_utilisateurs_session")
  @@ignore
}

enum ThemeType {
  MYTHOS
  LOGOS
  MIST
  CREW
  ORIGIN
  ADVENTURE
  GREATNESS
  FELLOWSHIP
  BACKPACK
}

enum TagType {
  POWER
  WEAKNESS
  STORY
}
